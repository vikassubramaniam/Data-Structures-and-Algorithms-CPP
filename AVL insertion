#include<stdio.h>
#include<stdlib.h>
 struct Node
{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};
int max(int a, int b);
int height(struct Node *N)
{
    if (N == NULL)
        return 0;
    return N->height;
}
 
int max(int a, int b)
{
    return (a > b)? a : b;
}

struct Node* newNode(int key)
{
    struct Node* node = (struct Node*)
                        malloc(sizeof(struct Node));
    node->key   = key;
    node->left   = NULL;
    node->right  = NULL;
    node->height = 1;  
    return(node);
}

struct Node *rightR(struct Node *y)
{
     struct Node *x = y->left;
     struct Node *T2 = x->right;
     x->right = y;
     y->left = T2;  
     y->height = max(height(y->left), height(y->right))+1;
     x->height = max(height(x->left), height(x->right))+1;

    return x;
}
struct Node *leftR(struct Node *x)
{
     struct Node *y = x->right;
     struct Node *T2 = y->left;
 
     y->left = x;
     x->right = T2;
     x->height = max(height(x->left), height(x->right))+1;
     y->height = max(height(y->left), height(y->right))+1;
     return y;
}
 int getBalance(struct Node *N)
{
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}
 

struct Node* insert(struct Node* node, int key)
{
    
    if (node == NULL)
        return(newNode(key));
 
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else 
        return node;
 
   
    node->height = 1 + max(height(node->left),
                           height(node->right));
 
     int balance = getBalance(node);
 
    // If this node becomes unbalanced, then 4 cases
 
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightR(node);
 
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftR(node);
     // Left Right Case
    if (balance > 1 && key > node->left->key)
    {
        node->left =  leftR(node->left);
        return rightR(node);
    }
     // Right Left Case
    if (balance < -1 && key < node->right->key)
    {
        node->right = rightR(node->right);
        return leftR(node);
    }
    return node;
}
 

void preOrder(struct Node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}
 int main()
{
  
  struct Node* root=NULL;
 int key, ch,n,i,x;
        while (1) {
                printf("1. create\n");
                printf("2.  insert\n");
                printf("3. traversal\n");
                printf("4. Exit\nEnter your choice:");
                scanf("%d", &ch);
                switch (ch) {
                         case 1:printf("\nEnter no.of elements :");
                       scanf("%d",&n);
                       printf("\n Enter tree data :");
                       root=NULL;
                       for(i=0;i<n;i++)
                       {
                        scanf("%d",&x);
                        root=insert(root,x);
                       }
                       break;
                case 2:printf("\nEnter a data : ");
                       scanf("%d",&x);
                       root=insert(root,x);
                       break;
                       
                   case 3: printf("preorder is\n");
				   preOrder(root);    
                        case 4:
                                exit(0);
                        default:
                                printf("Wrong Option!!\n");
                                break;
                }
                printf("\n");
        }
        return 0;   
}
